  
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: flip it app infrastructure

Parameters:
  DomainName:
    Type: String
    Description: Domain Name
  Certificate:
    Type: String
    Description: ACM Certificate
  CallbackURL:
    Type: String
  UsersBucket:
    Type: String
  HostedZoneId:
    Type: String

Resources:
  AppsUsersBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref UsersBucket

  AppsUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UsernameAttributes:
        - email
      UserPoolName: "Mau Apps"
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true

  AppsPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: apps-pool-client
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - !Ref CallbackURL
        - "http://localhost:4200/"
      LogoutURLs:
        - !Ref CallbackURL
      RefreshTokenValidity: 30
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: false
      UserPoolId: !Ref AppsUserPool
      WriteAttributes:
        - email
      ReadAttributes:
        - email

  AppsUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref AppsUserPool
      Domain: !Ref DomainName
      CustomDomainConfig:
        CertificateArn: !Ref Certificate

  AppsIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: apps-identity-pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref AppsPoolClient
          ProviderName: !GetAtt AppsUserPool.ProviderName

  AppsCognitoAuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref AppsIdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Join ['', ['arn:aws:s3:::', !Ref AppsUsersBucket]]
                Condition:
                  StringLike:
                    "s3:prefix":
                      - "${cognito-identity.amazonaws.com:sub}"
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref AppsUsersBucket, "/${cognito-identity.amazonaws.com:sub}"]]
                  - !Join ['', ['arn:aws:s3:::', !Ref AppsUsersBucket, "/${cognito-identity.amazonaws.com:sub}/*"]]

  AppsIdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref AppsIdentityPool
      Roles:
        authenticated: !GetAtt AppsCognitoAuthorizedRole.Arn
